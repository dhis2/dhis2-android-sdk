/*
 * Copyright (c) 2016, University of Oslo
 *
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * Neither the name of the HISP project nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

plugins {
    id "com.android.library"
    id "kotlin-android"
    id "kotlin-kapt"
    id "io.gitlab.arturbosch.detekt" version "1.18.0"
    id "org.jetbrains.dokka" version "1.4.30" apply false
}

apply from: project.file("plugins/android-checkstyle.gradle")
apply from: project.file("plugins/android-pmd.gradle")

ext {
    configuration = [
            buildToolsVersion: "30.0.2",
            minSdkVersion    : 19,
            targetSdkVersion : 30,
            versionCode      : 260,
            versionName      : "1.6.0-SNAPSHOT"
    ]

    libraries = [
            // android
            annotation      : '1.3.0',
            paging          : '2.1.2',

            // java
            apacheCommons   : "3.8.1",
            jackson         : "2.11.2",
            autoValue       : "1.7.4",
            autoValueCursor : "2.0.1",
            retrofit        : "2.9.0",
            okHttp          : "3.12.0",
            dagger          : "2.39.1",
            rxJava          : "2.2.12",
            rxAndroid       : "2.1.1",
            sqlCipher       : "4.4.0",
            jexl            : "2.1.1",
            jodaTime        : "2.10.6",
            smsCompression  : "0.2.0",
            expressionParser: "1.0.25",

            // test dependencies
            coreTesting     : "2.1.0",
            jUnit           : "4.13.2",
            mockito         : "3.4.6",
            mockitoKotlin   : "2.2.0",
            truth           : "1.1.2",
            testRunner      : "1.4.0",
            equalsVerifier  : "3.4.1",
            flipper         : "0.83.0",
            soloader        : "0.10.1",
            liveDataTesting : "1.2.0",
            commonsLogging  : "1.2",

            // google
            safetyNet       : "18.0.1",

            // open id
            appauth         : "0.8.1"
    ]
}

def configuration = project.ext.configuration
def libraries = project.ext.libraries

android {
    compileSdkVersion configuration.targetSdkVersion
    buildToolsVersion configuration.buildToolsVersion

    defaultConfig {
        minSdkVersion configuration.minSdkVersion
        targetSdkVersion configuration.targetSdkVersion
        versionCode configuration.versionCode
        versionName configuration.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
        buildConfigField("String","VERSION_NAME","\"${defaultConfig.versionName}\"")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        // excluding duplicate license files
        // from jackson modules
        exclude "META-INF/LICENSE"

        // should be removed with interoperability library
        exclude "META-INF/rxjava.properties"
    }

    lintOptions {
        // casting 'InvalidPackage' error to warning
        warning "InvalidPackage"

        // Fail early.
        abortOnError true
    }

    buildTypes {
        debug {
            // a fix for the debugger not being able to find local scope variables
            testCoverageEnabled = false
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
            resources.srcDirs += ['src/sharedTest/resources']
        }
        androidTest {
            java.srcDirs sharedTestDir
            resources.srcDirs += ['src/sharedTest/resources']
        }

    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}


dependencies {
    // RxJava
    api "io.reactivex.rxjava2:rxjava:${libraries.rxJava}"
    api "io.reactivex.rxjava2:rxandroid:${libraries.rxAndroid}"

    // AndroidX
    api "androidx.annotation:annotation:${libraries.annotation}"
    api "androidx.paging:paging-runtime:${libraries.paging}"

    // Auto Value
    api "com.google.auto.value:auto-value-annotations:${libraries.autoValue}"
    kapt "com.google.auto.value:auto-value:${libraries.autoValue}"

    // Dagger
    api "com.google.dagger:dagger:${libraries.dagger}"
    kapt "com.google.dagger:dagger-compiler:${libraries.dagger}"

    // Jackson
    api "com.fasterxml.jackson.core:jackson-databind:${libraries.jackson}"
    api "com.fasterxml.jackson.module:jackson-module-kotlin:${libraries.jackson}"


    // Google's play services
    api "com.google.android.gms:play-services-safetynet:${libraries.safetyNet}"

    // Square libraries
    api "com.squareup.okhttp3:okhttp:${libraries.okHttp}"
    api "com.squareup.retrofit2:retrofit:${libraries.retrofit}"
    api "com.squareup.retrofit2:converter-jackson:${libraries.retrofit}"
    api "com.squareup.retrofit2:adapter-rxjava2:${libraries.retrofit}"

    // Apache libraries
    api "org.apache.commons:commons-lang3:${libraries.apacheCommons}"
    api("org.apache.commons:commons-jexl:${libraries.jexl}") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    // Joda time
    api "joda-time:joda-time:${libraries.jodaTime}"

    // sms compression library
    api "com.github.dhis2:sms-compression:${libraries.smsCompression}"

    // DHIS 2 antlr expression parser
    api "org.hisp.dhis.parser:dhis-antlr-expression-parser:${libraries.expressionParser}"

    // Extension which generates mappers for work with cursor and content values
    api "com.gabrielittner.auto.value:auto-value-cursor-annotations:${libraries.autoValueCursor}"
    kapt "com.gabrielittner.auto.value:auto-value-cursor:${libraries.autoValueCursor}"

    api "net.zetetic:android-database-sqlcipher:${libraries.sqlCipher}"

    api "com.squareup.okhttp3:mockwebserver:${libraries.okHttp}"

    // Java test dependencies
    testImplementation "junit:junit:${libraries.jUnit}"
    testImplementation "org.mockito:mockito-core:${libraries.mockito}"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${libraries.mockitoKotlin}"
    testImplementation("com.google.truth:truth:${libraries.truth}") {
        exclude group: 'junit' // Android has JUnit built in.
    }
    testImplementation "nl.jqno.equalsverifier:equalsverifier:${libraries.equalsVerifier}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${libraries.okHttp}"
    testImplementation "androidx.test:runner:${libraries.testRunner}"
    testImplementation "commons-logging:commons-logging:${libraries.commonsLogging}"

    // Android test dependencies
    androidTestImplementation "commons-logging:commons-logging:${libraries.commonsLogging}"
    androidTestImplementation "org.mockito:mockito-core:${libraries.mockito}"
    androidTestImplementation "androidx.arch.core:core-testing:${libraries.coreTesting}"
    androidTestImplementation "com.jraska.livedata:testing-ktx:${libraries.liveDataTesting}"
    androidTestImplementation "androidx.test:runner:${libraries.testRunner}"
    androidTestImplementation "com.squareup.okhttp3:logging-interceptor:${libraries.okHttp}"
    androidTestImplementation("com.google.truth:truth:${libraries.truth}") {
        exclude group: 'junit' // Android has JUnit built in.
    }
    debugImplementation "com.facebook.flipper:flipper:${libraries.flipper}"
    debugImplementation "com.facebook.soloader:soloader:${libraries.soloader}"
    debugImplementation ("com.facebook.flipper:flipper-network-plugin:${libraries.flipper}") {
        exclude group: 'com.squareup.okhttp3'
    }

    releaseImplementation "com.facebook.flipper:flipper-noop:${libraries.flipper}"

    implementation "net.openid:appauth:${libraries.appauth}"
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
}

apply from: project.file("plugins/gradle-mvn-push.gradle")
repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

detekt {
    toolVersion = "1.18.0"
    config = files("config/detekt.yml")
    parallel = true
    buildUponDefaultConfig = false
}


