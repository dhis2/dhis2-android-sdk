/*
 * Copyright (c) 2016, University of Oslo
 *
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * Neither the name of the HISP project nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: "checkstyle"

afterEvaluate {
    android.libraryVariants.each { variant ->

        tasks.register("checkstyle${variant.name.capitalize()}", Checkstyle) { checkstyleTask ->

            checkstyleTask.group = "verification"
            checkstyleTask.description = "Run Checkstyle for the ${variant.name}"

            // Fail early.
            checkstyleTask.ignoreFailures = false

            // Do not output results into console.
            checkstyleTask.showViolations = false

            checkstyleTask.configFile = rootProject.file(
                    "plugins/checkstyle-style.xml"
            )

            checkstyleTask.include(
                    "**/*.java"
            )

            checkstyleTask.exclude(
                    "**/R.java", "**/BuildConfig.java"
            )

            def compileTask = variant.javaCompile
            checkstyleTask.source = compileTask.source
            checkstyleTask.classpath = compileTask.classpath.plus(project.files(android.bootClasspath))
            checkstyleTask.dependsOn(compileTask)

            def checkTask = tasks.getByName("check")
            checkTask.dependsOn(checkstyleTask)
        }
    }
}